// =========================================
// 1. CONFIGURATION
// =========================================
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearchPostgres", "postgresqlExtensions"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgVector(map: "vector"), pg_trgm]
}

// =========================================
// 2. ENUMS
// =========================================

//--- Core System Enums ---
enum UserRole {
  admin
  user
  moderator
  learner
  guest
}

enum ContentStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
  ARCHIVED
}

enum AchievementType {
  STREAK
  WORDS_LEARNED
  PERFECT_SCORE
  SPEED_LEARNING
  CONSISTENT_PRACTICE
}

// Adding the missing DifficultyLevel enum
enum DifficultyLevel {
  beginner
  elementary
  intermediate
  advanced
  proficient
}

enum LearningStatus {
  notStarted
  inProgress
  learned
  needsReview
  difficult
}

enum SessionType {
  review
  newLearning
  practice
  test
  spaced
}

//--- Language Related Enums ---
enum LanguageCode {
  en @map("en") // English
  ru @map("ru") // Russian
  da @map("da") // Danish
  es @map("es") // Spanish
  fr @map("fr") // French
  de @map("de") // German
  it @map("it") // Italian
  pt @map("pt") // Portuguese
  zh @map("zh") // Chinese
  ja @map("ja") // Japanese
  ko @map("ko") // Korean
  ar @map("ar") // Arabic
}

enum PartOfSpeech {
  noun // substantiv
  verb // verbum
  phrasal_verb // (English-specific, keep for compatibility)
  adjective // adjektiv
  adverb // adverbium
  pronoun // pronomen
  preposition // præposition
  conjunction // konjunktion
  interjection // interjektion
  numeral // talord
  article // artikel
  // Danish-specific part of speech
  exclamation // udråbsord
  abbreviation // forkortelse
  suffix // suffiks
  last_letter // sidsteled
  adj_pl // adj. pl.
  symbol // symbol
  //--------------------------------
  phrase // faste udtryk (fixed expressions)
  sentence // sætning (not standard part of speech)
  undefined
}

enum RelationshipType {
  synonym
  antonym
  related
  stem
  composition
  phrasal_verb
  phrase

  alternative_spelling
  abbreviation
  derived_form
  dialect_variant

  translation

  // English-specific inflections
  plural_en //word -> words
  past_tense_en //begin -> began
  past_participle_en //begin -> begun
  present_participle_en //begin -> beginning
  third_person_en //begin -> begins
  variant_form_phrasal_verb_en //begin -> begin with

  // Danish-specific inflections
  definite_form_da
  plural_da
  plural_definite_da

  //verbs
  present_tense_da
  past_tense_da
  past_participle_da
  imperative_da

  adjective_neuter_da
  adjective_plural_da

  comparative_da
  superlative_da

  adverb_comparative_da
  adverb_superlative_da

  pronoun_accusative_da
  pronoun_genitive_da

  //new relations
  genitive_form_da
  common_gender_da
  neuter_gender_da

  neuter_form_da

  adverbial_form_da

  other_form_da

  neuter_pronoun_da
  plural_pronoun_da

  contextual_usage_da

}

enum SourceType {
  ai_generated         @map("ai-generated")
  merriam_learners
  merriam_intermediate
  helsinki_nlp
  danish_dictionary
  user
  admin
}

enum Gender {
  masculine
  feminine
  common //n-ord (fælleskøn)
  neuter //t-ord (intetkøn)
  common_neuter //n-t-ord (fælleskøn eller intetkøn)
}

// =========================================
// 3. CORE MODELS
// =========================================
/**
 * Core User and related models, Authentication and settings:
 * - User
 * - UserSettings
 */

model User {
  id                 String       @id @default(uuid()) @db.Uuid
  name               String       @db.VarChar(255)
  email              String       @unique @db.VarChar(255)
  password           String       @db.VarChar(255)
  baseLanguageCode   LanguageCode @map("base_language_code")
  targetLanguageCode LanguageCode @map("target_language_code")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @default(now()) @updatedAt @map("updated_at")
  lastLogin          DateTime     @default(now()) @map("lastLogin")
  role               UserRole
  isVerified         Boolean      @default(false)
  verificationToken  String?      @db.VarChar(255)
  profilePictureUrl  String?      @db.VarChar(255)
  status             String       @db.VarChar(255)
  settings           Json         @default("{}")
  studyPreferences   Json         @map("study_preferences")
  deletedAt          DateTime?    @map("deleted_at")

  // Learning related
  lists            List[]                @relation("UserToList")
  userDictionary   UserDictionary[]
  userLists        UserList[]            @relation("UserToUserList")
  userSettings     UserSettings?
  learningSessions UserLearningSession[]
  progress         UserProgress[]
  analytics        LearningAnalytics[]

  // Social & Gamification
  achievements  UserAchievement[]
  studyGroups   StudyGroupMember[]
  createdGroups StudyGroup[]       @relation("GroupCreator")

  // Error tracking & Contributions
  mistakes      LearningMistake[]
  contributions ContentContribution[] @relation("contributor")
  reviews       ContentContribution[] @relation("reviewer")

  @@index([lastLogin])
  @@map("users")
}

model UserSettings {
  id                   String   @id @default(uuid()) @db.Uuid
  userId               String   @unique @map("user_id") @db.Uuid
  dailyGoal            Int      @default(5) @map("daily_goal")
  notificationsEnabled Boolean  @default(true) @map("notifications_enabled")
  soundEnabled         Boolean  @default(true) @map("sound_enabled")
  autoPlayAudio        Boolean  @default(true) @map("auto_play_audio")
  darkMode             Boolean  @default(false) @map("dark_mode")
  learningReminders    Json     @default("{}") @map("learning_reminders")
  sessionDuration      Int      @default(15) @map("session_duration") // in minutes
  reviewInterval       Int      @default(3) @map("review_interval") // in days
  difficultyPreference Int      @default(1) @map("difficulty_preference") // 1-5 scale
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at")
  user                 User     @relation(fields: [userId], references: [id])

  @@map("user_settings")
}

// =========================================
// 4. DICTIONARY MODELS AND CONTENT
// =========================================
/**
 * Core dictionary and content models including:
 * - Word
 * - Definition
 * - Examples
 * - Audio
 * - Images
 */

model Word {
  id               Int          @id @default(autoincrement())
  word             String       @db.VarChar(255)
  phoneticGeneral  String?      @db.VarChar(100)
  frequencyGeneral Int?         @map("frequency_general")
  isHighlighted    Boolean      @default(false) @map("is_highlighted")
  etymology        String?      @db.Text
  additionalInfo   Json?        @default("{}")
  languageCode     LanguageCode @map("language_code")
  sourceEntityId   String?      @db.VarChar(255)
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  // Relations
  details             WordDetails[]
  mistakes            LearningMistake[]
  // Added relationship fields
  relatedFromWords    WordToWordRelationship[]       @relation("FromWord")
  relatedToWords      WordToWordRelationship[]       @relation("ToWord")
  linkedByDefinitions DefinitionToWordRelationship[] @relation("WordLinkedByDefinitions")

  @@unique([word, languageCode])
  @@index([word], map: "idx_word_search")
  @@index([languageCode], map: "idx_word_language")
  @@map("words")
}

model WordDetails {
  id           Int          @id @default(autoincrement())
  wordId       Int          @map("word_id")
  partOfSpeech PartOfSpeech @map("part_of_speech")
  variant      String?      @db.VarChar(100)
  gender       Gender?      @map("gender")
  phonetic     String?      @db.VarChar(100)
  forms        String?      @db.VarChar(100) //-t, -e, -ere, -est
  frequency    Int?         @map("frequency")
  isPlural     Boolean      @default(false)
  source       SourceType   @map("source_of_word_details")

  word Word @relation(fields: [wordId], references: [id], onDelete: Cascade)

  // Renamed relations for consistency with model name
  definitions WordDefinition[]          @relation("WordDetailsToDefinition")
  relatedFrom WordDetailsRelationship[] @relation("FromWordDetails")
  relatedTo   WordDetailsRelationship[] @relation("ToWordDetails")
  audioLinks  WordDetailsAudio[]
  mistakes    LearningMistake[] // Added relation to consolidated mistake model

  // Variant is nullable, so we need to handle this carefully
  // This unique constraint means:
  // - For each word + partOfSpeech combination, there can be only one "base" form (null variant)
  // - For each word + partOfSpeech combination, each variant must be unique
  @@unique([wordId, partOfSpeech, variant])
  @@map("word_details")
}

model Definition {
  id                  Int          @id @default(autoincrement())
  definition          String       @db.Text
  imageId             Int?         @map("image_id")
  source              SourceType   @map("source_of_definition")
  languageCode        LanguageCode @map("language_code")
  subjectStatusLabels String?      @map("subject_status_labels") @db.VarChar(255)
  generalLabels       String?      @map("general_labels") @db.VarChar(255)
  grammaticalNote     String?      @map("grammatical_note") @db.VarChar(255)
  usageNote           String?      @map("usage_note") @db.VarChar(255)
  isInShortDef        Boolean      @default(false) @map("is_in_short_def")
  createdAt           DateTime     @default(now()) @map("created_at")
  updatedAt           DateTime     @updatedAt @map("updated_at")

  // Relations
  wordDetails      WordDefinition[]               @relation("DefinitionToWordDetails")
  image            Image?                         @relation(fields: [imageId], references: [id])
  examples         DefinitionExample[]            @relation("DefinitionToExample")
  listWords        ListWord[]
  userDictionary   UserDictionary[]
  audioLinks       DefinitionAudio[]
  translationLinks DefinitionTranslation[]
  relatedFromDefs  DefinitionRelationship[]       @relation("FromDefinition")
  relatedToDefs    DefinitionRelationship[]       @relation("ToDefinition")
  wordLinks        DefinitionToWordRelationship[] @relation("DefinitionToWordLinks")
  mistakes         LearningMistake[] // Added relation to consolidated mistake model

  // Simplified uniqueness constraint focusing on core attributes
  @@unique([definition, languageCode, source])
  @@map("definitions")
}

model DefinitionExample {
  id              Int          @id @default(autoincrement())
  example         String       @db.Text
  grammaticalNote String?      @map("grammatical_note") @db.VarChar(255)
  //author of the example
  sourceOfExample String?      @map("source_of_example") @db.VarChar(255)
  languageCode    LanguageCode @map("language_code")
  definitionId    Int          @map("definition_id")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  // Relations
  definition       Definition           @relation("DefinitionToExample", fields: [definitionId], references: [id], onDelete: Cascade)
  audioLinks       ExampleAudio[]
  translationLinks ExampleTranslation[]

  @@unique([definitionId, example])
  @@index([definitionId], map: "idx_definition_example_def")
  @@index([languageCode], map: "idx_definition_example_lang")
  @@map("definition_examples")
}

// Audio and Translation models might simplify
model Audio {
  id           Int          @id @default(autoincrement())
  url          String       @db.VarChar(255)
  source       SourceType
  note         String?      @db.VarChar(255)
  languageCode LanguageCode @map("language_code") // Still makes sense here
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  wordDetailsLinks WordDetailsAudio[]
  definitionLinks  DefinitionAudio[]
  exampleLinks     ExampleAudio[]

  @@unique([url, languageCode]) // Simpler unique constraint?
  @@map("audio")
}

model Image {
  id          Int          @id @default(autoincrement())
  url         String       @db.VarChar(255)
  description String?      @db.Text
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  definitions Definition[]

  @@unique([url])
  @@map("images")
}

model Translation {
  id           Int          @id @default(autoincrement())
  languageCode LanguageCode // Target language of the translation
  content      String       @db.Text
  source       SourceType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  definitionLinks DefinitionTranslation[]
  exampleLinks    ExampleTranslation[]

  @@map("translations")
}

// =========================================
// 5. LEARNING MODELS
// =========================================
/**
 * Learning and progress tracking models including:
 * - List
 * - UserList
 * - UserDictionary
 * - Category
 */

model UserDictionary {
  id                 String       @id @default(uuid()) @db.Uuid
  userId             String       @map("user_id") @db.Uuid
  definitionId       Int          @map("definition_id")
  baseLanguageCode   LanguageCode @map("base_language_code")
  targetLanguageCode LanguageCode @map("target_language_code")

  // Enhanced custom user modifications
  customDefinitionBase   String?          @map("custom_definition_base") @db.Text
  customDefinitionTarget String?          @map("custom_definition_target") @db.Text
  customPhonetic         String?          @map("custom_phonetic") @db.VarChar(100)
  customEtymology        String?          @db.Text
  customNotes            String?          @db.Text
  customTags             String[] // User's personal tags for the word
  customExamples         UserExample[] // User's own examples
  customMnemonics        String?          @db.Text // Memory aids created by user
  customDifficultyLevel  DifficultyLevel? @map("custom_difficulty_level")
  customContext          Json?            @default("{}") // Where/how the user encountered the word
  isModified             Boolean          @default(false) @map("is_modified")
  isFavorite             Boolean          @default(false) @map("is_favorite")

  // Enhanced learning progress tracking
  learningStatus            LearningStatus @default(notStarted) @map("learning_status")
  lastReviewedAt            DateTime?      @map("last_reviewed_at")
  reviewCount               Int            @default(0) @map("review_count")
  timeWordWasStartedToLearn DateTime?      @map("time_word_was_started_to_learn")
  timeWordWasLearned        DateTime?      @map("time_word_was_learned")
  nextReviewDue             DateTime?      @map("next_review_due")
  progress                  Float          @default(0)
  amountOfMistakes          Int            @default(0) @map("amount_of_mistakes")
  correctStreak             Int            @default(0) @map("correct_streak")

  // Enhanced SRS (Spaced Repetition System) data
  srsLevel       Int       @default(0) @map("srs_level")
  srsInterval    Int       @default(0) @map("srs_interval") // in hours
  lastSrsSuccess Boolean?  @map("last_srs_success")
  nextSrsReview  DateTime? @map("next_srs_review")

  // Usage statistics
  lastUsedInContext DateTime? @map("last_used_in_context")
  usageCount        Int       @default(0) @map("usage_count")
  masteryScore      Float     @default(0) @map("mastery_score") // 0-100

  // Timestamps and metadata
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  jsonbData Json      @default("{}") @map("jsonb_data")

  // Relations
  definition       Definition        @relation(fields: [definitionId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userListWords    UserListWord[]
  sessionItems     UserSessionItem[]
  mistakes         LearningMistake[]
  reminderSettings UserWordReminder?
  customAudio      UserWordAudio[]

  @@unique([userId, definitionId])
  @@index([userId, learningStatus], map: "idx_learning_status")
  @@index([userId, nextReviewDue], map: "idx_next_review")
  @@index([userId, progress], map: "idx_progress")
  @@index([userId, correctStreak], map: "idx_streak")
  @@index([lastReviewedAt], map: "idx_active_words")
  @@index([userId, isFavorite], map: "idx_favorites")
  @@index([userId, srsLevel], map: "idx_srs_level")
  @@map("user_dictionary")
}

model ListWord {
  listId       String @map("list_id") @db.Uuid
  definitionId Int    @map("definition_id")
  orderIndex   Int    @map("order_index")

  list       List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  definition Definition @relation(fields: [definitionId], references: [id], onDelete: Cascade)

  @@id([listId, definitionId])
  @@index([listId, orderIndex], map: "idx_list_words_order")
  @@map("list_words")
}

model UserListWord {
  userListId       String @map("user_list_id") @db.Uuid
  orderIndex       Int    @map("order_index")
  userDictionaryId String @map("user_dictionary_id") @db.Uuid

  userDictionary UserDictionary @relation(fields: [userDictionaryId], references: [id], onDelete: Cascade)
  userList       UserList       @relation(fields: [userListId], references: [id], onDelete: Cascade)

  @@id([userListId, userDictionaryId])
  @@map("user_list_words")
}

model List {
  id                 String                @id @default(uuid()) @db.Uuid
  name               String                @db.VarChar(255)
  description        String?
  categoryId         Int                   @map("category_id")
  baseLanguageCode   LanguageCode          @map("base_language_code")
  targetLanguageCode LanguageCode          @map("target_language_code")
  isPublic           Boolean               @default(false) @map("is_public")
  createdAt          DateTime              @default(now()) @map("created_at")
  updatedAt          DateTime              @default(now()) @updatedAt @map("updated_at")
  tags               String[]
  coverImageUrl      String?               @db.VarChar(255)
  difficultyLevel    DifficultyLevel       @map("difficulty_level")
  wordCount          Int                   @default(0) @map("wordCount")
  learnedWordCount   Int                   @default(0) @map("learned_word_count")
  lastModified       DateTime              @default(now()) @map("last_modified")
  jsonbData          Json                  @default("{}") @map("jsonb_data")
  deletedAt          DateTime?             @map("deleted_at")
  listWords          ListWord[]
  userLists          UserList[]            @relation("ListToUserLists")
  category           Category              @relation(fields: [categoryId], references: [id])
  users              User[]                @relation("UserToList")
  learningSessions   UserLearningSession[]
  studyGroups        StudyGroup[] // Add relation to StudyGroup

  @@unique([name, categoryId])
  @@index([baseLanguageCode, targetLanguageCode], map: "idx_lists_language")
  @@index([difficultyLevel], map: "idx_list_difficulty")
  @@index([isPublic, baseLanguageCode, targetLanguageCode], map: "idx_public_lists")
  @@map("lists")
}

model UserList {
  id                      String                @id @default(uuid()) @db.Uuid
  userId                  String                @map("user_id") @db.Uuid
  listId                  String?               @map("list_id") @db.Uuid
  baseLanguageCode        LanguageCode          @map("base_language_code")
  targetLanguageCode      LanguageCode          @map("target_language_code")
  isModified              Boolean               @default(false) @map("is_modified")
  customNameOfList        String?               @map("custom_name_of_list") @db.VarChar(255)
  customDescriptionOfList String?               @map("custom_description_of_list") @db.VarChar(1000)
  customCoverImageUrl     String?               @db.VarChar(255)
  createdAt               DateTime              @default(now()) @map("created_at")
  updatedAt               DateTime              @default(now()) @updatedAt @map("updated_at")
  customDifficulty        DifficultyLevel?      @map("custom_difficulty")
  progress                Float                 @default(0)
  jsonbData               Json                  @default("{}") @map("jsonb_data")
  deletedAt               DateTime?             @map("deleted_at")
  userListWords           UserListWord[]
  list                    List?                 @relation("ListToUserLists", fields: [listId], references: [id])
  user                    User                  @relation("UserToUserList", fields: [userId], references: [id])
  learningSessions        UserLearningSession[]

  @@unique([userId, listId])
  @@index([userId, progress], map: "idx_user_lists_progress")
  @@index([userId, isModified], map: "idx_user_lists_modified")
  @@index([createdAt], map: "idx_user_lists_created_at")
  @@map("user_lists")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(255)
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  lists       List[]

  @@map("categories")
}

model UserWordAudio {
  id               String   @id @default(uuid()) @db.Uuid
  userDictionaryId String   @map("user_dictionary_id") @db.Uuid
  audioUrl         String   @db.VarChar(255)
  description      String?  @db.Text
  createdAt        DateTime @default(now())

  // Relations
  userDictionary UserDictionary @relation(fields: [userDictionaryId], references: [id], onDelete: Cascade)

  @@index([userDictionaryId])
  @@map("user_word_audio")
}

model UserExample {
  id               String   @id @default(uuid()) @db.Uuid
  userDictionaryId String   @map("user_dictionary_id") @db.Uuid
  example          String   @db.Text
  context          String?  @db.Text
  source           String?  @db.VarChar(255)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  userDictionary UserDictionary @relation(fields: [userDictionaryId], references: [id], onDelete: Cascade)

  @@index([userDictionaryId])
  @@map("user_examples")
}

// =========================================
// 6. USER PROGRESS, ANALYTICS AND TRACKING
// =========================================
/**
 * Audio and media models including:
 * - LearningAnalytics
 * - UserProgress
 * - UserWordReminder
 * - UserLearningSession
 * - UserSessionItem
 * - UserWordMistake
 */

model LearningAnalytics {
  id                String @id @default(uuid()) @db.Uuid
  userId            String @db.Uuid
  timeSpentLearning Int // in seconds
  learningPatterns  Json // Store learning patterns data
  strengthAreas     Json // Areas where user performs well
  weaknessAreas     Json // Areas needing improvement
  learningStyle     Json // Identified learning style preferences

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("learning_analytics")
}

model UserProgress {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @db.Uuid
  date           DateTime
  minutesStudied Int
  wordsLearned   Int
  streakDays     Int

  // Add missing relation
  user User @relation(fields: [userId], references: [id])

  @@map("user_progress")
}

model UserWordReminder {
  id               String    @id @default(uuid()) @db.Uuid
  userDictionaryId String    @unique @map("user_dictionary_id") @db.Uuid
  isEnabled        Boolean   @default(true)
  frequency        String // e.g., "daily", "weekly", "custom"
  customSchedule   Json? // Custom reminder schedule
  lastReminder     DateTime?
  nextReminder     DateTime?

  // Relations
  userDictionary UserDictionary @relation(fields: [userDictionaryId], references: [id], onDelete: Cascade)

  @@map("user_word_reminders")
}

model UserLearningSession {
  id                   String            @id @default(uuid()) @db.Uuid
  userId               String            @map("user_id") @db.Uuid
  userListId           String?           @map("user_list_id") @db.Uuid
  listId               String?           @map("list_id") @db.Uuid
  sessionType          SessionType       @map("session_type")
  startTime            DateTime          @map("start_time")
  endTime              DateTime?         @map("end_time")
  duration             Int?              @map("duration") // in seconds
  wordsStudied         Int               @default(0) @map("words_studied")
  wordsLearned         Int               @default(0) @map("words_learned")
  correctAnswers       Int               @default(0) @map("correct_answers")
  incorrectAnswers     Int               @default(0) @map("incorrect_answers")
  score                Float?            @map("score")
  completionPercentage Float             @default(0) @map("completion_percentage")
  sessionItems         UserSessionItem[]
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @default(now()) @updatedAt @map("updated_at")
  user                 User              @relation(fields: [userId], references: [id])
  userList             UserList?         @relation(fields: [userListId], references: [id])
  list                 List?             @relation(fields: [listId], references: [id])

  @@index([userId, startTime], map: "idx_user_sessions_by_date")
  @@index([userId, sessionType], map: "idx_user_sessions_by_type")
  @@map("user_learning_sessions")
}

model UserSessionItem {
  id               String              @id @default(uuid()) @db.Uuid
  sessionId        String              @map("session_id") @db.Uuid
  userDictionaryId String              @map("user_dictionary_id") @db.Uuid
  isCorrect        Boolean             @default(false) @map("is_correct")
  responseTime     Int?                @map("response_time") // in milliseconds
  attemptsCount    Int                 @default(1) @map("attempts_count")
  createdAt        DateTime            @default(now()) @map("created_at")
  session          UserLearningSession @relation(fields: [sessionId], references: [id])
  userDictionary   UserDictionary      @relation(fields: [userDictionaryId], references: [id])

  @@unique([sessionId, userDictionaryId])
  @@map("user_session_items")
}

model LearningMistake {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @db.Uuid
  wordId           Int      @map("word_id")
  wordDetailsId    Int?     @map("word_details_id") // Optional to support both Word and WordDetails level tracking
  definitionId     Int?     @map("definition_id") // Optional to connect to specific definitions
  userDictionaryId String?  @map("user_dictionary_id") @db.Uuid // Optional connection to user dictionary
  type             String // e.g., "pronunciation", "meaning", "usage", "spelling"
  incorrectValue   String?  @db.Text
  context          String?  @db.Text
  mistakeData      Json // Detailed information about the mistake
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  word           Word            @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordDetails    WordDetails?    @relation(fields: [wordDetailsId], references: [id], onDelete: SetNull)
  definition     Definition?     @relation(fields: [definitionId], references: [id], onDelete: SetNull)
  userDictionary UserDictionary? @relation(fields: [userDictionaryId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([wordId])
  @@index([wordDetailsId])
  @@index([definitionId])
  @@index([userDictionaryId])
  @@index([type])
  @@index([createdAt])
  @@map("learning_mistakes")
}

// =========================================
// 7. SOCIAL AND GAMIFICATION MODELS
// =========================================
/**
 * Social features and gamification including:
 * - StudyGroup
 * - StudyGroupMember
 * - Achievement
 * - UserAchievement
 */

model StudyGroup {
  id          String             @id @default(uuid()) @db.Uuid
  name        String
  description String?
  createdBy   String             @db.Uuid
  isPrivate   Boolean            @default(false)
  members     StudyGroupMember[]
  lists       List[] // Shared vocabulary lists

  // Add creator relation
  creator User @relation("GroupCreator", fields: [createdBy], references: [id])

  @@map("study_groups")
}

model StudyGroupMember {
  groupId  String   @db.Uuid
  userId   String   @db.Uuid
  role     String // admin, moderator, member
  joinedAt DateTime @default(now())

  // Relations
  group StudyGroup @relation(fields: [groupId], references: [id])
  user  User       @relation(fields: [userId], references: [id])

  @@id([groupId, userId])
  @@map("study_group_members")
}

model Achievement {
  id          Int             @id @default(autoincrement())
  type        AchievementType
  name        String
  description String
  points      Int
  criteria    Json // Conditions to unlock
  iconUrl     String?

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @db.Uuid
  achievementId Int
  unlockedAt    DateTime
  progress      Float // Progress towards achievement (0-100)

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@map("user_achievements")
}

// =========================================
// 8. SUPPORTING & UTILITY MODELS
// =========================================
/**
 * Supporting features including:
 * - ContentContribution
 */

model ContentContribution {
  id            Int           @id @default(autoincrement())
  type          String // word, definition, example, etc.
  content       Json
  status        ContentStatus @default(PENDING_REVIEW)
  contributorId String        @db.Uuid
  reviewerId    String?       @db.Uuid
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Add relations
  contributor User  @relation("contributor", fields: [contributorId], references: [id])
  reviewer    User? @relation("reviewer", fields: [reviewerId], references: [id])

  @@map("content_contributions")
}

// =========================================
// 9. JUNCTION & RELATIONSHIP MODELS
// =========================================
/**
 * Junction tables and relationships including:
 * - WordDefinition: Connecting words to their definitions.
 * - WordRelationship: Establishing relationships between words.
 * - ListWord: Associating words with lists.
 * - UserListWord: Linking words to user lists.
 * - Audio relationships: Connecting words to their audio pronunciations.
 */

model WordDefinition {
  wordDetailsId Int      @map("word_details_id")
  definitionId  Int      @map("definition_id")
  isPrimary     Boolean  @default(false) @map("is_primary")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  wordDetails WordDetails @relation("WordDetailsToDefinition", fields: [wordDetailsId], references: [id], onDelete: Cascade)
  definition  Definition  @relation("DefinitionToWordDetails", fields: [definitionId], references: [id], onDelete: Cascade)

  @@id([wordDetailsId, definitionId])
  @@index([wordDetailsId], map: "idx_word_definition_details")
  @@index([definitionId], map: "idx_word_definition_def")
  @@map("word_definitions")
}

//*
//* Relationship section
//* 1. WordToWordRelationship  word ---> word
//* 2. WordDetailsRelationship  wordDetails ---> wordDetails
//* 3. DefinitionToWordRelationship  definition ---> word
//* 4. DefinitionRelationship  definition ---> definition
//* 5. WordDetailsAudio  wordDetails ---> audio
//* 6. DefinitionAudio  definition ---> audio
//* 7. ExampleAudio  example ---> audio
//* 8. DefinitionTranslation  definition ---> translation
//* 9. ExampleTranslation  example ---> translation
//*
//*
model WordToWordRelationship {
  fromWordId  Int              @map("from_word_id")
  toWordId    Int              @map("to_word_id")
  type        RelationshipType @map("relationship_type")
  orderIndex  Int?             @map("order_index")
  createdAt   DateTime         @default(now()) @map("created_at")
  description String?          @db.Text

  fromWord Word @relation("FromWord", fields: [fromWordId], references: [id], onDelete: Cascade)
  toWord   Word @relation("ToWord", fields: [toWordId], references: [id], onDelete: Cascade)

  @@id([fromWordId, toWordId, type])
  @@index([fromWordId, type], map: "idx_word_to_word_rel_from_word")
  @@index([toWordId, type], map: "idx_word_to_word_rel_to_word")
  @@index([fromWordId, toWordId], name: "idx_word_pair")
  @@map("word_to_word_relationships")
}

model WordDetailsRelationship {
  fromWordDetailsId Int              @map("from_word_details_id")
  toWordDetailsId   Int              @map("to_word_details_id")
  type              RelationshipType @map("relationship_type")
  orderIndex        Int?             @map("order_index")
  createdAt         DateTime         @default(now()) @map("created_at")
  description       String?          @db.Text

  fromWordDetails WordDetails @relation("FromWordDetails", fields: [fromWordDetailsId], references: [id], onDelete: Cascade)
  toWordDetails   WordDetails @relation("ToWordDetails", fields: [toWordDetailsId], references: [id], onDelete: Cascade)

  @@id([fromWordDetailsId, toWordDetailsId, type])
  @@index([fromWordDetailsId, type], map: "idx_word_relationship_from")
  @@index([toWordDetailsId, type], map: "idx_word_relationship_to")
  @@index([fromWordDetailsId, toWordDetailsId], name: "idx_word_details_pair")
  @@map("word_details_relationships")
}

model DefinitionToWordRelationship {
  fromDefinitionId Int              @map("from_definition_id")
  toWordId         Int              @map("to_word_id")
  type             RelationshipType @map("relationship_type")
  orderIndex       Int?             @map("order_index")
  createdAt        DateTime         @default(now()) @map("created_at")
  description      String?          @db.Text

  // Relations
  fromDefinition Definition @relation("DefinitionToWordLinks", fields: [fromDefinitionId], references: [id], onDelete: Cascade)
  toWord         Word       @relation("WordLinkedByDefinitions", fields: [toWordId], references: [id], onDelete: Cascade)

  @@id([fromDefinitionId, toWordId, type])
  @@index([fromDefinitionId, type], map: "idx_def_to_word_rel_from_def")
  @@index([toWordId, type], map: "idx_def_to_word_rel_to_word")
  @@index([fromDefinitionId, toWordId], name: "idx_def_word_pair")
  @@map("definition_to_word_relationships")
}

model DefinitionRelationship {
  fromDefinitionId Int              @map("from_definition_id")
  toDefinitionId   Int              @map("to_definition_id")
  type             RelationshipType @map("relationship_type")
  orderIndex       Int?             @map("order_index")
  createdAt        DateTime         @default(now()) @map("created_at")
  description      String?          @db.Text

  fromDefinition Definition @relation("FromDefinition", fields: [fromDefinitionId], references: [id], onDelete: Cascade)
  toDefinition   Definition @relation("ToDefinition", fields: [toDefinitionId], references: [id], onDelete: Cascade)

  @@id([fromDefinitionId, toDefinitionId, type])
  @@index([fromDefinitionId, type], map: "idx_def_relationship_from")
  @@index([toDefinitionId, type], map: "idx_def_relationship_to")
  @@index([fromDefinitionId, toDefinitionId], name: "idx_def_pair")
  @@map("definition_relationships")
}

//junction table for many-to-many relationship between WordDetails and Audio

model WordDetailsAudio {
  wordDetailsId Int     @map("word_details_id")
  audioId       Int     @map("audio_id")
  isPrimary     Boolean @default(false) @map("is_primary")

  wordDetails WordDetails @relation(fields: [wordDetailsId], references: [id], onDelete: Cascade)
  audio       Audio       @relation(fields: [audioId], references: [id], onDelete: Cascade)

  @@id([wordDetailsId, audioId])
  @@unique([wordDetailsId, isPrimary], map: "word_details_primary_audio_unique")
  @@index([isPrimary])
  @@map("word_details_audio")
}

model DefinitionAudio {
  definitionId Int        @map("definition_id")
  audioId      Int        @map("audio_id")
  isPrimary    Boolean    @default(false) @map("is_primary")
  definition   Definition @relation(fields: [definitionId], references: [id], onDelete: Cascade)
  audio        Audio      @relation(fields: [audioId], references: [id], onDelete: Cascade)

  @@id([definitionId, audioId])
  @@unique([definitionId, isPrimary], map: "definition_primary_audio_unique")
  @@index([isPrimary])
  @@map("definition_audio")
}

model ExampleAudio {
  exampleId Int               @map("example_id")
  audioId   Int               @map("audio_id")
  isPrimary Boolean           @default(false) @map("is_primary")
  example   DefinitionExample @relation(fields: [exampleId], references: [id], onDelete: Cascade)
  audio     Audio             @relation(fields: [audioId], references: [id], onDelete: Cascade)

  @@id([exampleId, audioId])
  @@unique([exampleId, isPrimary], map: "example_primary_audio_unique")
  @@index([isPrimary])
  @@map("example_audio")
}

//junction table for many-to-many relationship between Definition and Translation

model DefinitionTranslation {
  definitionId  Int @map("definition_id")
  translationId Int @map("translation_id")

  definition  Definition  @relation(fields: [definitionId], references: [id], onDelete: Cascade)
  translation Translation @relation(fields: [translationId], references: [id], onDelete: Cascade)

  @@id([definitionId, translationId])
  @@map("definition_translations")
}

model ExampleTranslation {
  exampleId     Int @map("example_id")
  translationId Int @map("translation_id")

  example     DefinitionExample @relation(fields: [exampleId], references: [id], onDelete: Cascade)
  translation Translation       @relation(fields: [translationId], references: [id], onDelete: Cascade)

  @@id([exampleId, translationId])
  @@map("example_translations")
}
