name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# Concurrency control - cancel previous runs for same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==========================================
  # SETUP & VALIDATION
  # ==========================================
  setup:
    name: 🔧 Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better caching

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: 🎯 Cache Key Generation
        id: cache-key
        run: echo "key=${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Environment Validation
        run: |
          echo "Node version: $(node -v)"
          echo "pnpm version: $(pnpm -v)"
          echo "TypeScript version: $(npx tsc --version)"

  # ==========================================
  # CODE QUALITY & LINTING
  # ==========================================
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎨 Prettier Check
        run: pnpm prettier --check .

      - name: 🧹 ESLint Check
        run: pnpm lint
        continue-on-error: false

      - name: 🔍 TypeScript Check
        run: pnpm tsc --noEmit

      - name: 📊 Bundle Analysis
        run: |
          if [ -f "package.json" ] && grep -q "analyze" package.json; then
            pnpm analyze
          else
            echo "Bundle analysis not configured"
          fi

  # ==========================================
  # TESTING SUITE
  # ==========================================
  test-unit:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run Unit Tests
        run: pnpm test:run --coverage
        env:
          CI: true

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  test-server:
    name: 🖥️ Server Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🗄️ Setup Database
        run: |
          cd tests
          pnpm p-generate
          pnpm p-migrate:deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb

      - name: 🧪 Run Server Tests
        run: |
          cd tests
          pnpm test:*
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          CI: true

  # ==========================================
  # E2E TESTING
  # ==========================================
  test-e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: 🗄️ Setup Database
        run: |
          pnpm p-generate
          pnpm p-migrate:deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb

      - name: 🏗️ Build Application
        run: pnpm build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb

      - name: 🎭 Run E2E Tests
        run: pnpm test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          CI: true

      - name: 📸 Upload Test Results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # ==========================================
  # SECURITY SCANNING
  # ==========================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      security-events: write
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Audit Dependencies
        run: pnpm audit --audit-level high

      - name: 🔐 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🏗️ Build for Analysis
        run: pnpm build

      - name: 🔐 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ==========================================
  # PERFORMANCE TESTING
  # ==========================================
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build Application
        run: pnpm build

      - name: 🚀 Start Application
        run: pnpm start &
        env:
          PORT: 3000

      - name: ⏱️ Wait for Application
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'

      - name: 🔍 Lighthouse Performance Audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # ==========================================
  # BUILD & DEPLOYMENT
  # ==========================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [quality, test-unit, test-server, test-e2e, security]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build Application
        run: pnpm build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 1

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

      - name: 💬 Post Deployment Comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Staging deployment completed successfully!'
            })

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: 📊 Post-Deployment Health Check
        run: |
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1

  # ==========================================
  # NOTIFICATIONS
  # ==========================================
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: 📢 Success Notification
        if: needs.deploy-production.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          # Add Slack/Discord notification here if needed

      - name: 🚨 Failure Notification
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          # Add Slack/Discord notification here if needed
