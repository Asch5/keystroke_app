// Generated by prisma-generator-typescript-interfaces - Zero-dependency types for client-side use\nDo not edit manually - run 'prisma generate' to update

export type UserRole = 'admin' | 'user' | 'moderator' | 'learner' | 'guest';

export const UserRole = {
  admin: 'admin',
  user: 'user',
  moderator: 'moderator',
  learner: 'learner',
  guest: 'guest',
} satisfies Record<string, UserRole>;

export type ContentStatus =
  | 'DRAFT'
  | 'PENDING_REVIEW'
  | 'APPROVED'
  | 'REJECTED'
  | 'ARCHIVED';

export const ContentStatus = {
  DRAFT: 'DRAFT',
  PENDING_REVIEW: 'PENDING_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  ARCHIVED: 'ARCHIVED',
} satisfies Record<string, ContentStatus>;

export type AchievementType =
  | 'STREAK'
  | 'WORDS_LEARNED'
  | 'PERFECT_SCORE'
  | 'SPEED_LEARNING'
  | 'CONSISTENT_PRACTICE';

export const AchievementType = {
  STREAK: 'STREAK',
  WORDS_LEARNED: 'WORDS_LEARNED',
  PERFECT_SCORE: 'PERFECT_SCORE',
  SPEED_LEARNING: 'SPEED_LEARNING',
  CONSISTENT_PRACTICE: 'CONSISTENT_PRACTICE',
} satisfies Record<string, AchievementType>;

export type DifficultyLevel =
  | 'beginner'
  | 'elementary'
  | 'intermediate'
  | 'advanced'
  | 'proficient';

export const DifficultyLevel = {
  beginner: 'beginner',
  elementary: 'elementary',
  intermediate: 'intermediate',
  advanced: 'advanced',
  proficient: 'proficient',
} satisfies Record<string, DifficultyLevel>;

export type LearningStatus =
  | 'notStarted'
  | 'inProgress'
  | 'learned'
  | 'needsReview'
  | 'difficult';

export const LearningStatus = {
  notStarted: 'notStarted',
  inProgress: 'inProgress',
  learned: 'learned',
  needsReview: 'needsReview',
  difficult: 'difficult',
} satisfies Record<string, LearningStatus>;

export type SessionType =
  | 'review'
  | 'newLearning'
  | 'practice'
  | 'test'
  | 'spaced';

export const SessionType = {
  review: 'review',
  newLearning: 'newLearning',
  practice: 'practice',
  test: 'test',
  spaced: 'spaced',
} satisfies Record<string, SessionType>;

export type LanguageCode =
  | 'en'
  | 'ru'
  | 'da'
  | 'es'
  | 'fr'
  | 'de'
  | 'it'
  | 'pt'
  | 'zh'
  | 'ja'
  | 'ko'
  | 'ar'
  | 'pl'
  | 'hi'
  | 'ne'
  | 'tr'
  | 'sv'
  | 'no'
  | 'fi'
  | 'ur'
  | 'fa'
  | 'uk'
  | 'ro'
  | 'nl'
  | 'vi'
  | 'bn'
  | 'id';

export const LanguageCode = {
  en: 'en',
  ru: 'ru',
  da: 'da',
  es: 'es',
  fr: 'fr',
  de: 'de',
  it: 'it',
  pt: 'pt',
  zh: 'zh',
  ja: 'ja',
  ko: 'ko',
  ar: 'ar',
  pl: 'pl',
  hi: 'hi',
  ne: 'ne',
  tr: 'tr',
  sv: 'sv',
  no: 'no',
  fi: 'fi',
  ur: 'ur',
  fa: 'fa',
  uk: 'uk',
  ro: 'ro',
  nl: 'nl',
  vi: 'vi',
  bn: 'bn',
  id: 'id',
} satisfies Record<string, LanguageCode>;

export type PartOfSpeech =
  | 'noun'
  | 'verb'
  | 'phrasal_verb'
  | 'adjective'
  | 'adverb'
  | 'pronoun'
  | 'preposition'
  | 'conjunction'
  | 'interjection'
  | 'numeral'
  | 'article'
  | 'exclamation'
  | 'abbreviation'
  | 'suffix'
  | 'first_part'
  | 'last_letter'
  | 'adj_pl'
  | 'symbol'
  | 'phrase'
  | 'sentence'
  | 'undefined';

export const PartOfSpeech = {
  noun: 'noun',
  verb: 'verb',
  phrasal_verb: 'phrasal_verb',
  adjective: 'adjective',
  adverb: 'adverb',
  pronoun: 'pronoun',
  preposition: 'preposition',
  conjunction: 'conjunction',
  interjection: 'interjection',
  numeral: 'numeral',
  article: 'article',
  exclamation: 'exclamation',
  abbreviation: 'abbreviation',
  suffix: 'suffix',
  first_part: 'first_part',
  last_letter: 'last_letter',
  adj_pl: 'adj_pl',
  symbol: 'symbol',
  phrase: 'phrase',
  sentence: 'sentence',
  undefined: 'undefined',
} satisfies Record<string, PartOfSpeech>;

export type RelationshipType =
  | 'synonym'
  | 'antonym'
  | 'related'
  | 'stem'
  | 'composition'
  | 'phrasal_verb'
  | 'phrase'
  | 'alternative_spelling'
  | 'abbreviation'
  | 'derived_form'
  | 'dialect_variant'
  | 'translation'
  | 'plural_en'
  | 'past_tense_en'
  | 'past_participle_en'
  | 'present_participle_en'
  | 'third_person_en'
  | 'variant_form_phrasal_verb_en'
  | 'definite_form_da'
  | 'plural_da'
  | 'plural_definite_da'
  | 'present_tense_da'
  | 'past_tense_da'
  | 'past_participle_da'
  | 'imperative_da'
  | 'adjective_neuter_da'
  | 'adjective_plural_da'
  | 'comparative_da'
  | 'superlative_da'
  | 'adverb_comparative_da'
  | 'adverb_superlative_da'
  | 'pronoun_accusative_da'
  | 'pronoun_genitive_da'
  | 'genitive_form_da'
  | 'common_gender_da'
  | 'neuter_gender_da'
  | 'neuter_form_da'
  | 'adverbial_form_da'
  | 'other_form_da'
  | 'neuter_pronoun_da'
  | 'plural_pronoun_da'
  | 'contextual_usage_da';

export const RelationshipType = {
  synonym: 'synonym',
  antonym: 'antonym',
  related: 'related',
  stem: 'stem',
  composition: 'composition',
  phrasal_verb: 'phrasal_verb',
  phrase: 'phrase',
  alternative_spelling: 'alternative_spelling',
  abbreviation: 'abbreviation',
  derived_form: 'derived_form',
  dialect_variant: 'dialect_variant',
  translation: 'translation',
  plural_en: 'plural_en',
  past_tense_en: 'past_tense_en',
  past_participle_en: 'past_participle_en',
  present_participle_en: 'present_participle_en',
  third_person_en: 'third_person_en',
  variant_form_phrasal_verb_en: 'variant_form_phrasal_verb_en',
  definite_form_da: 'definite_form_da',
  plural_da: 'plural_da',
  plural_definite_da: 'plural_definite_da',
  present_tense_da: 'present_tense_da',
  past_tense_da: 'past_tense_da',
  past_participle_da: 'past_participle_da',
  imperative_da: 'imperative_da',
  adjective_neuter_da: 'adjective_neuter_da',
  adjective_plural_da: 'adjective_plural_da',
  comparative_da: 'comparative_da',
  superlative_da: 'superlative_da',
  adverb_comparative_da: 'adverb_comparative_da',
  adverb_superlative_da: 'adverb_superlative_da',
  pronoun_accusative_da: 'pronoun_accusative_da',
  pronoun_genitive_da: 'pronoun_genitive_da',
  genitive_form_da: 'genitive_form_da',
  common_gender_da: 'common_gender_da',
  neuter_gender_da: 'neuter_gender_da',
  neuter_form_da: 'neuter_form_da',
  adverbial_form_da: 'adverbial_form_da',
  other_form_da: 'other_form_da',
  neuter_pronoun_da: 'neuter_pronoun_da',
  plural_pronoun_da: 'plural_pronoun_da',
  contextual_usage_da: 'contextual_usage_da',
} satisfies Record<string, RelationshipType>;

export type SourceType =
  | 'ai_generated'
  | 'merriam_learners'
  | 'merriam_intermediate'
  | 'helsinki_nlp'
  | 'danish_dictionary'
  | 'user'
  | 'admin'
  | 'frequency_import';

export const SourceType = {
  ai_generated: 'ai_generated',
  merriam_learners: 'merriam_learners',
  merriam_intermediate: 'merriam_intermediate',
  helsinki_nlp: 'helsinki_nlp',
  danish_dictionary: 'danish_dictionary',
  user: 'user',
  admin: 'admin',
  frequency_import: 'frequency_import',
} satisfies Record<string, SourceType>;

export type Gender =
  | 'masculine'
  | 'feminine'
  | 'common'
  | 'neuter'
  | 'common_neuter';

export const Gender = {
  masculine: 'masculine',
  feminine: 'feminine',
  common: 'common',
  neuter: 'neuter',
  common_neuter: 'common_neuter',
} satisfies Record<string, Gender>;

export interface User {
  id: string;
  name: string;
  email: string;
  password: string;
  baseLanguageCode: LanguageCode;
  targetLanguageCode: LanguageCode;
  createdAt: Date;
  updatedAt: Date;
  lastLogin: Date;
  role: UserRole;
  isVerified: boolean;
  verificationToken: string | null;
  profilePictureUrl: string | null;
  status: string;
  settings: JsonValue;
  studyPreferences: JsonValue;
  deletedAt: Date | null;
  lists?: List[];
  userDictionary?: UserDictionary[];
  userLists?: UserList[];
  userSettings?: UserSettings | null;
  learningSessions?: UserLearningSession[];
  progress?: UserProgress[];
  analytics?: LearningAnalytics[];
  achievements?: UserAchievement[];
  studyGroups?: StudyGroupMember[];
  createdGroups?: StudyGroup[];
  mistakes?: LearningMistake[];
  contributions?: ContentContribution[];
  reviews?: ContentContribution[];
}

export interface UserSettings {
  id: string;
  userId: string;
  dailyGoal: number;
  notificationsEnabled: boolean;
  soundEnabled: boolean;
  autoPlayAudio: boolean;
  darkMode: boolean;
  learningReminders: JsonValue;
  sessionDuration: number;
  reviewInterval: number;
  difficultyPreference: number;
  createdAt: Date;
  updatedAt: Date;
  user?: User;
}

export interface Word {
  id: number;
  word: string;
  phoneticGeneral: string | null;
  frequencyGeneral: number | null;
  isHighlighted: boolean;
  additionalInfo: JsonValue | null;
  languageCode: LanguageCode;
  sourceEntityId: string | null;
  createdAt: Date;
  updatedAt: Date;
  details?: WordDetails[];
  mistakes?: LearningMistake[];
  relatedFromWords?: WordToWordRelationship[];
  relatedToWords?: WordToWordRelationship[];
  linkedByDefinitions?: DefinitionToWordRelationship[];
  oneWordDefinitions?: DefinitionToOneWord[];
}

export interface WordDetails {
  id: number;
  wordId: number;
  partOfSpeech: PartOfSpeech;
  variant: string | null;
  gender: Gender | null;
  etymology: string | null;
  phonetic: string | null;
  forms: string | null;
  frequency: number | null;
  isPlural: boolean;
  source: SourceType;
  word?: Word;
  definitions?: WordDefinition[];
  relatedFrom?: WordDetailsRelationship[];
  relatedTo?: WordDetailsRelationship[];
  audioLinks?: WordDetailsAudio[];
  mistakes?: LearningMistake[];
}

export interface Definition {
  id: number;
  definition: string;
  imageId: number | null;
  source: SourceType;
  languageCode: LanguageCode;
  subjectStatusLabels: string | null;
  generalLabels: string | null;
  grammaticalNote: string | null;
  usageNote: string | null;
  isInShortDef: boolean;
  createdAt: Date;
  updatedAt: Date;
  wordDetails?: WordDefinition[];
  image?: Image | null;
  examples?: DefinitionExample[];
  listWords?: ListWord[];
  userDictionary?: UserDictionary[];
  audioLinks?: DefinitionAudio[];
  translationLinks?: DefinitionTranslation[];
  relatedFromDefs?: DefinitionRelationship[];
  relatedToDefs?: DefinitionRelationship[];
  wordLinks?: DefinitionToWordRelationship[];
  oneWordLinks?: DefinitionToOneWord[];
  mistakes?: LearningMistake[];
}

export interface DefinitionExample {
  id: number;
  example: string;
  grammaticalNote: string | null;
  sourceOfExample: string | null;
  languageCode: LanguageCode;
  definitionId: number;
  createdAt: Date;
  updatedAt: Date;
  definition?: Definition;
  audioLinks?: ExampleAudio[];
  translationLinks?: ExampleTranslation[];
}

export interface Audio {
  id: number;
  url: string;
  source: SourceType;
  note: string | null;
  languageCode: LanguageCode;
  createdAt: Date;
  updatedAt: Date;
  wordDetailsLinks?: WordDetailsAudio[];
  definitionLinks?: DefinitionAudio[];
  exampleLinks?: ExampleAudio[];
}

export interface Image {
  id: number;
  url: string;
  description: string | null;
  createdAt: Date;
  updatedAt: Date;
  definitions?: Definition[];
}

export interface Translation {
  id: number;
  languageCode: LanguageCode;
  content: string;
  source: SourceType;
  createdAt: Date;
  updatedAt: Date;
  definitionLinks?: DefinitionTranslation[];
  exampleLinks?: ExampleTranslation[];
}

export interface UserDictionary {
  id: string;
  userId: string;
  definitionId: number;
  targetLanguageCode: LanguageCode;
  customDefinitionBase: string | null;
  customDefinitionTarget: string | null;
  customPhonetic: string | null;
  customEtymology: string | null;
  customNotes: string | null;
  customTags: string[];
  customExamples?: UserExample[];
  customMnemonics: string | null;
  customDifficultyLevel: DifficultyLevel | null;
  customContext: JsonValue | null;
  isModified: boolean;
  isFavorite: boolean;
  learningStatus: LearningStatus;
  lastReviewedAt: Date | null;
  reviewCount: number;
  timeWordWasStartedToLearn: Date | null;
  timeWordWasLearned: Date | null;
  nextReviewDue: Date | null;
  progress: number;
  amountOfMistakes: number;
  correctStreak: number;
  skipCount: number;
  srsLevel: number;
  srsInterval: number;
  lastSrsSuccess: boolean | null;
  nextSrsReview: Date | null;
  lastUsedInContext: Date | null;
  usageCount: number;
  masteryScore: number;
  createdAt: Date;
  updatedAt: Date;
  deletedAt: Date | null;
  jsonbData: JsonValue;
  definition?: Definition;
  user?: User;
  userListWords?: UserListWord[];
  sessionItems?: UserSessionItem[];
  mistakes?: LearningMistake[];
  reminderSettings?: UserWordReminder | null;
  customAudio?: UserWordAudio[];
}

export interface ListWord {
  listId: string;
  definitionId: number;
  orderIndex: number;
  list?: List;
  definition?: Definition;
}

export interface UserListWord {
  userListId: string;
  orderIndex: number;
  userDictionaryId: string;
  userDictionary?: UserDictionary;
  userList?: UserList;
}

export interface List {
  id: string;
  name: string;
  description: string | null;
  categoryId: number;
  targetLanguageCode: LanguageCode;
  isPublic: boolean;
  createdAt: Date;
  updatedAt: Date;
  tags: string[];
  coverImageUrl: string | null;
  difficultyLevel: DifficultyLevel;
  wordCount: number;
  learnedWordCount: number;
  lastModified: Date;
  jsonbData: JsonValue;
  deletedAt: Date | null;
  listWords?: ListWord[];
  userLists?: UserList[];
  category?: Category;
  users?: User[];
  learningSessions?: UserLearningSession[];
  studyGroups?: StudyGroup[];
}

export interface UserList {
  id: string;
  userId: string;
  listId: string | null;
  sourceUserListId: string | null;
  targetLanguageCode: LanguageCode;
  isPublic: boolean;
  isModified: boolean;
  customNameOfList: string | null;
  customDescriptionOfList: string | null;
  customCoverImageUrl: string | null;
  createdAt: Date;
  updatedAt: Date;
  customDifficulty: DifficultyLevel | null;
  progress: number;
  jsonbData: JsonValue;
  deletedAt: Date | null;
  userListWords?: UserListWord[];
  list?: List | null;
  user?: User;
  sourceUserList?: UserList | null;
  copiedByUsers?: UserList[];
  learningSessions?: UserLearningSession[];
}

export interface Category {
  id: number;
  name: string;
  description: string | null;
  createdAt: Date;
  updatedAt: Date;
  lists?: List[];
}

export interface UserWordAudio {
  id: string;
  userDictionaryId: string;
  audioUrl: string;
  description: string | null;
  createdAt: Date;
  userDictionary?: UserDictionary;
}

export interface UserExample {
  id: string;
  userDictionaryId: string;
  example: string;
  context: string | null;
  source: string | null;
  createdAt: Date;
  updatedAt: Date;
  userDictionary?: UserDictionary;
}

export interface LearningAnalytics {
  id: string;
  userId: string;
  timeSpentLearning: number;
  learningPatterns: JsonValue;
  strengthAreas: JsonValue;
  weaknessAreas: JsonValue;
  learningStyle: JsonValue;
  user?: User;
}

export interface UserProgress {
  id: string;
  userId: string;
  date: Date;
  minutesStudied: number;
  wordsLearned: number;
  streakDays: number;
  user?: User;
}

export interface UserWordReminder {
  id: string;
  userDictionaryId: string;
  isEnabled: boolean;
  frequency: string;
  customSchedule: JsonValue | null;
  lastReminder: Date | null;
  nextReminder: Date | null;
  userDictionary?: UserDictionary;
}

export interface UserLearningSession {
  id: string;
  userId: string;
  userListId: string | null;
  listId: string | null;
  sessionType: SessionType;
  startTime: Date;
  endTime: Date | null;
  duration: number | null;
  wordsStudied: number;
  wordsLearned: number;
  correctAnswers: number;
  incorrectAnswers: number;
  score: number | null;
  completionPercentage: number;
  sessionItems?: UserSessionItem[];
  createdAt: Date;
  updatedAt: Date;
  user?: User;
  userList?: UserList | null;
  list?: List | null;
}

export interface UserSessionItem {
  id: string;
  sessionId: string;
  userDictionaryId: string;
  isCorrect: boolean;
  responseTime: number | null;
  attemptsCount: number;
  createdAt: Date;
  session?: UserLearningSession;
  userDictionary?: UserDictionary;
}

export interface LearningMistake {
  id: string;
  userId: string;
  wordId: number;
  wordDetailsId: number | null;
  definitionId: number | null;
  userDictionaryId: string | null;
  type: string;
  incorrectValue: string | null;
  context: string | null;
  mistakeData: JsonValue;
  createdAt: Date;
  updatedAt: Date;
  user?: User;
  word?: Word;
  wordDetails?: WordDetails | null;
  definition?: Definition | null;
  userDictionary?: UserDictionary | null;
}

export interface StudyGroup {
  id: string;
  name: string;
  description: string | null;
  createdBy: string;
  isPrivate: boolean;
  members?: StudyGroupMember[];
  lists?: List[];
  creator?: User;
}

export interface StudyGroupMember {
  groupId: string;
  userId: string;
  role: string;
  joinedAt: Date;
  group?: StudyGroup;
  user?: User;
}

export interface Achievement {
  id: number;
  type: AchievementType;
  name: string;
  description: string;
  points: number;
  criteria: JsonValue;
  iconUrl: string | null;
  userAchievements?: UserAchievement[];
}

export interface UserAchievement {
  id: string;
  userId: string;
  achievementId: number;
  unlockedAt: Date;
  progress: number;
  user?: User;
  achievement?: Achievement;
}

export interface ContentContribution {
  id: number;
  type: string;
  content: JsonValue;
  status: ContentStatus;
  contributorId: string;
  reviewerId: string | null;
  notes: string | null;
  createdAt: Date;
  updatedAt: Date;
  contributor?: User;
  reviewer?: User | null;
}

export interface WordDefinition {
  wordDetailsId: number;
  definitionId: number;
  isPrimary: boolean;
  createdAt: Date;
  updatedAt: Date;
  wordDetails?: WordDetails;
  definition?: Definition;
}

export interface WordToWordRelationship {
  fromWordId: number;
  toWordId: number;
  type: RelationshipType;
  orderIndex: number | null;
  createdAt: Date;
  description: string | null;
  fromWord?: Word;
  toWord?: Word;
}

export interface WordDetailsRelationship {
  fromWordDetailsId: number;
  toWordDetailsId: number;
  type: RelationshipType;
  orderIndex: number | null;
  createdAt: Date;
  description: string | null;
  fromWordDetails?: WordDetails;
  toWordDetails?: WordDetails;
}

export interface DefinitionToWordRelationship {
  fromDefinitionId: number;
  toWordId: number;
  type: RelationshipType;
  orderIndex: number | null;
  createdAt: Date;
  description: string | null;
  fromDefinition?: Definition;
  toWord?: Word;
}

export interface DefinitionRelationship {
  fromDefinitionId: number;
  toDefinitionId: number;
  type: RelationshipType;
  orderIndex: number | null;
  createdAt: Date;
  description: string | null;
  fromDefinition?: Definition;
  toDefinition?: Definition;
}

export interface WordDetailsAudio {
  wordDetailsId: number;
  audioId: number;
  isPrimary: boolean;
  wordDetails?: WordDetails;
  audio?: Audio;
}

export interface DefinitionAudio {
  definitionId: number;
  audioId: number;
  isPrimary: boolean;
  definition?: Definition;
  audio?: Audio;
}

export interface ExampleAudio {
  exampleId: number;
  audioId: number;
  isPrimary: boolean;
  example?: DefinitionExample;
  audio?: Audio;
}

export interface DefinitionTranslation {
  definitionId: number;
  translationId: number;
  definition?: Definition;
  translation?: Translation;
}

export interface ExampleTranslation {
  exampleId: number;
  translationId: number;
  example?: DefinitionExample;
  translation?: Translation;
}

export interface DefinitionToOneWord {
  definitionId: number;
  wordId: number;
  definition?: Definition;
  word?: Word;
}

type JsonValue =
  | string
  | number
  | boolean
  | { [key in string]?: JsonValue }
  | Array<JsonValue>
  | null;
